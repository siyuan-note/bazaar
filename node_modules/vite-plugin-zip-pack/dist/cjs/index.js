"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const jszip_1 = __importDefault(require("jszip"));
function timeZoneOffset(date) {
    return new Date(date.getTime() - date.getTimezoneOffset() * 60000);
}
function zipPack(options) {
    const inDir = (options === null || options === void 0 ? void 0 : options.inDir) || "dist";
    const outDir = (options === null || options === void 0 ? void 0 : options.outDir) || "dist-zip";
    const outFileName = (options === null || options === void 0 ? void 0 : options.outFileName) || "dist.zip";
    const pathPrefix = (options === null || options === void 0 ? void 0 : options.pathPrefix) || '';
    const done = (options === null || options === void 0 ? void 0 : options.done) || function () { };
    const filter = (options === null || options === void 0 ? void 0 : options.filter) || (() => true);
    async function addFilesToZipArchive(zip, inDir) {
        const listOfFiles = await fs_1.default.promises.readdir(inDir);
        for (const fileName of listOfFiles) {
            const filePath = path_1.default.join(inDir, fileName);
            const file = await fs_1.default.promises.stat(filePath);
            const timeZoneOffsetDate = timeZoneOffset(new Date(file.mtime));
            if (file.isDirectory()) {
                if (!filter(fileName, filePath, true)) {
                    continue;
                }
                zip.file(fileName, null, {
                    dir: true,
                    date: timeZoneOffsetDate
                });
                const dir = zip.folder(fileName);
                if (!dir) {
                    throw new Error(`fileName '${fileName}' couldn't get included als directory in the zip`);
                }
                await addFilesToZipArchive(dir, filePath);
            }
            else {
                if (filter(fileName, filePath, false)) {
                    zip.file(fileName, await fs_1.default.promises.readFile(filePath), { date: timeZoneOffsetDate });
                }
            }
        }
    }
    async function createZipArchive(zip) {
        // @ts-ignore
        zip.root = '';
        const file = await zip
            .generateAsync({
            type: "nodebuffer",
            compression: "DEFLATE",
            compressionOptions: {
                level: 9,
            },
        });
        const fileName = path_1.default.join(outDir, outFileName);
        if (fs_1.default.existsSync(fileName)) {
            await fs_1.default.promises.unlink(fileName);
        }
        await fs_1.default.promises.writeFile(fileName, file);
        done(undefined);
    }
    return {
        name: "vite-plugin-zip-pack",
        apply: "build",
        enforce: "post",
        async closeBundle() {
            try {
                console.log("\x1b[36m%s\x1b[0m", `Zip packing - "${inDir}" folder :`);
                if (!fs_1.default.existsSync(inDir)) {
                    throw new Error(` - "${inDir}" folder does not exist!`);
                }
                if (!fs_1.default.existsSync(outDir)) {
                    await fs_1.default.promises.mkdir(outDir, { recursive: true });
                }
                if (pathPrefix && path_1.default.isAbsolute(pathPrefix)) {
                    throw new Error('"pathPrefix" must be a relative path');
                }
                const zip = new jszip_1.default();
                let archive;
                if (pathPrefix) {
                    const timeZoneOffsetDate = timeZoneOffset(new Date());
                    zip.file(pathPrefix, null, {
                        dir: true,
                        date: timeZoneOffsetDate
                    });
                    const zipFolder = zip.folder(pathPrefix);
                    if (!zipFolder)
                        throw new Error("Files could not be loaded from 'pathPrefix'");
                    archive = zipFolder;
                }
                else {
                    archive = zip;
                }
                console.log("\x1b[32m%s\x1b[0m", "  - Preparing files.");
                await addFilesToZipArchive(archive, inDir);
                console.log("\x1b[32m%s\x1b[0m", "  - Creating zip archive.");
                await createZipArchive(archive);
                console.log("\x1b[32m%s\x1b[0m", "  - Done.");
            }
            catch (error) {
                if (error) {
                    console.log("\x1b[31m%s\x1b[0m", `  - ${error}`);
                }
                console.log("\x1b[31m%s\x1b[0m", "  - Something went wrong while building zip file!");
                done(error);
            }
        }
    };
}
exports.default = zipPack;
